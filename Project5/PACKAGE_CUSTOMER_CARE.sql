CREATE OR REPLACE PACKAGE CUSTOMER_CARE
AS
    
    PROCEDURE ADD_DISCOUNT(C_NAME IN DISCOUNT.COUPON_NAME%TYPE, C_VALUE IN DISCOUNT.COUPON_VALUE%TYPE);
    
    PROCEDURE CLOSED_BY_CUSTOMER_CARE(T_ID IN TICKETING_QUEUE.TICKET_ID%TYPE);
    
END CUSTOMER_CARE;
/

CREATE OR REPLACE PACKAGE BODY CUSTOMER_CARE AS

    PROCEDURE ADD_DISCOUNT(C_NAME IN DISCOUNT.COUPON_NAME%TYPE, C_VALUE IN DISCOUNT.COUPON_VALUE%TYPE) IS
    V_COUNTER NUMBER := 0;
    C_AMOUNT NUMBER;
    CURRENT_USER VARCHAR(10);
    EX_INCORRECT_USER EXCEPTION;
    EX_NO_TABLE EXCEPTION;
    EX_C_NAME_EXISTS EXCEPTION;
    EX_C_NAME_NULL EXCEPTION;
    EX_AMOUNT_NEGATIVE EXCEPTION;
    EX_AMOUNT_NULL EXCEPTION;
    BEGIN
    SELECT USER INTO CURRENT_USER FROM DUAL;
    IF (CURRENT_USER <> 'NAGPALM') THEN
        RAISE EX_INCORRECT_USER;
    END IF;

    SELECT COUNT(*) INTO V_COUNTER FROM ALL_TABLES WHERE TABLE_NAME = 'DISCOUNT' AND TABLESPACE_NAME = 'DATA';
    IF V_COUNTER = 0 THEN
        RAISE EX_NO_TABLE;
    END IF;

    IF C_NAME IS NULL THEN
        RAISE EX_C_NAME_NULL;
    END IF;

    IF C_VALUE IS NULL THEN
        RAISE EX_AMOUNT_NULL;
    END IF;

    SELECT COUNT(*) INTO V_COUNTER FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
    IF V_COUNTER > 0 THEN
        SELECT COUPON_VALUE INTO C_AMOUNT FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
        IF C_AMOUNT = C_VALUE THEN
            RAISE EX_C_NAME_EXISTS;
        ELSE
            UPDATE DISCOUNT SET COUPON_VALUE = C_VALUE WHERE COUPON_NAME = C_NAME;
            SELECT COUPON_VALUE INTO C_AMOUNT FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
            DBMS_OUTPUT.PUT_LINE('COUPON UPDATED: ' || C_NAME || ' UPDATED VALUE: ' || C_AMOUNT);
        END IF;
    ELSE
        INSERT INTO DISCOUNT VALUES(((SELECT MAX(COUPON_ID) FROM DISCOUNT) + 1),C_NAME,C_VALUE,'ACTIVE');
        SELECT COUPON_VALUE INTO C_AMOUNT FROM DISCOUNT WHERE COUPON_NAME = C_NAME;
        DBMS_OUTPUT.PUT_LINE('COUPON ADDED: ' || C_NAME || ' VALUE: ' || C_AMOUNT);
    END IF;

    COMMIT;
    EXCEPTION
    WHEN EX_INCORRECT_USER THEN
        DBMS_OUTPUT.PUT_LINE('YOU CANNOT DO THIS ACTION. PLEASE CONTACT ADMIN');
    WHEN EX_NO_TABLE THEN
        DBMS_OUTPUT.PUT_LINE('TABLE DOES NOT EXIST. PLEAE CONTACT ADMIN');
    WHEN EX_C_NAME_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('COUPON NAME ALREADY EXIST');
    WHEN EX_AMOUNT_NULL THEN
        DBMS_OUTPUT.PUT_LINE('COUPON VALUE CANNOT BE EMPTY OR NULL');
    WHEN EX_C_NAME_NULL THEN
        DBMS_OUTPUT.PUT_LINE('COUPON VALUE CANNOT BE EMPTY OR NULL');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    ROLLBACK;
    END ADD_DISCOUNT;
    
    
    PROCEDURE CLOSED_BY_CUSTOMERCARE(T_ID IN TICKETING_QUEUE.TICKET_ID%TYPE) AS 
    EX_TICKETID_NULL EXCEPTION;
    EX_NO_TICKET_FOUND EXCEPTION;
    EX_ALREADY_CLOSED EXCEPTION;
    TICKET_INCORRECT_ID EXCEPTION;
    VAL2 NUMBER;
    COUNTER NUMBER;
    VAL NUMBER;
    
    BEGIN
      IF T_ID IS NULL THEN
                RAISE EX_NO_TICKET_FOUND;
            END IF;
            SELECT COUNT(TICKET_ID) INTO VAL FROM TICKETING_QUEUE WHERE TICKETING_QUEUE.TICKET_ID = T_ID;
         IF VAL = 0 THEN
            RAISE TICKET_INCORRECT_ID;
        END IF;
     SELECT COUNT (*) INTO COUNTER FROM TICKETING_QUEUE WHERE TICKETING_QUEUE.TICKET_ID = T_ID AND TICKET_STATUS = 'CLOSED';
     IF COUNTER > 0 THEN
        RAISE EX_ALREADY_CLOSED;
     END IF;
    UPDATE TICKETING_QUEUE
    SET TICKET_STATUS = 'CLOSED' WHERE  TICKETING_QUEUE.TICKET_ID = T_ID;
    
    SELECT TICKET_AGENT INTO VAL2 FROM TICKETING_QUEUE WHERE  TICKETING_QUEUE.TICKET_ID = T_ID;
    UPDATE CUSTOMER_TECHNICIAN_STATE 
    SET CUSTOMER_TECHNICIAN_STATUS = 'AVAILABLE' WHERE CUSTOMER_TECHNICIAN_STATE.EMPLOYEE_ID = VAL2;
    DBMS_OUTPUT.PUT_LINE('Ticket Closed');
     COMMIT;
      EXCEPTION
      WHEN TICKET_INCORRECT_ID THEN
      DBMS_OUTPUT.PUT_LINE('ENTERED TICKET ID IS WRONG');
        WHEN EX_TICKETID_NULL THEN
            DBMS_OUTPUT.PUT_LINE('TICKET ID CANNOT BE EMPTY');
         when EX_NO_TICKET_FOUND then
                dbms_output.put_line('TICKET ID does not exist');
        WHEN EX_ALREADY_CLOSED THEN
            DBMS_OUTPUT.PUT_LINE('Ticket is already closed');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
        ROLLBACK;
    END CLOSED_BY_CUSTOMERCARE;
    
    
END CUSTOMER_CARE;
/

CREATE OR REPLACE PUBLIC SYNONYM CUSTOMER_CARE for NAGPALM.CUSTOMER_CARE;