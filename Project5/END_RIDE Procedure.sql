create or replace PROCEDURE END_RIDE(EMAIL IN CUSTOMER.EMAIL_ID%TYPE, D_ID IN BIKE.DOCK_ID%TYPE,C_NAME IN DISCOUNT.COUPON_NAME%TYPE) AS
    END_TIME DATE := CURRENT_DATE;
    START_TIME DATE;
    CUST_ID CUSTOMER.CUSTOMER_ID%TYPE;
    DISCOUNT_AMT DISCOUNT.COUPON_VALUE%TYPE;
    TOTAL_TIME NUMBER;
    MEM_ID MEMBERSHIP.MEMBERSHIP_ID%TYPE;
    WAL_ID CUSTOMER.WALLET_ID%TYPE;
    BAL WALLET.BALANCE%TYPE;
    B_ID BIKE.BIKE_ID%TYPE;
    GRAND_TOTAL NUMBER;
    EMAIL_NULL EXCEPTION;
    D_ID_NULL EXCEPTION;

BEGIN

    IF D_ID IS NULL THEN
        RAISE D_ID_NULL;
    END IF;

    IF EMAIL IS NULL THEN
        RAISE EMAIL_NULL;
    END IF;

    SELECT CUSTOMER_ID INTO CUST_ID FROM CUSTOMER WHERE EMAIL_ID = UPPER(EMAIL);
    SELECT BIKE_ID INTO B_ID FROM RENT WHERE CUSTOMER_ID = CUST_ID;
    SELECT PICKUP_TIME INTO START_TIME FROM RENT WHERE CUSTOMER_ID = CUST_ID AND DROP_TIME IS NULL AND PAYMENT_STATUS IS NULL;
    SELECT (END_TIME - START_TIME)* 24 * 60 difference_in_minutes INTO TOTAL_TIME FROM DUAL;
    DBMS_OUTPUT.PUT_LINE(TOTAL_TIME);
    SELECT MEMBERSHIP_ID INTO MEM_ID FROM CUSTOMER WHERE EMAIL_ID = EMAIL;

    IF MEM_ID = 1 THEN
        GRAND_TOTAL := (TOTAL_TIME * 10) - (10*(TOTAL_TIME * 10)/100);
    ELSIF MEM_ID = 2 THEN
        GRAND_TOTAL := (TOTAL_TIME * 10) - (20*(TOTAL_TIME * 10)/100);
    ELSIF MEM_ID = 3 THEN
        GRAND_TOTAL := (TOTAL_TIME * 10) - (30*(TOTAL_TIME * 10)/100);
    ELSE
        GRAND_TOTAL := (TOTAL_TIME * 10);
    END IF;

    IF C_NAME IS NOT NULL THEN
        SELECT COUPON_VALUE INTO DISCOUNT_AMT FROM DISCOUNT WHERE COUPON_NAME = C_NAME AND COUPON_STATUS = 'ACTIVE';
        IF DISCOUNT_AMT > 0 AND DISCOUNT_AMT IS NOT NULL THEN
            GRAND_TOTAL := GRAND_TOTAL - DISCOUNT_AMT;
        END IF;
    END IF;

    SELECT WALLET_ID INTO WAL_ID FROM CUSTOMER WHERE EMAIL_ID = EMAIL;
    SELECT BALANCE INTO BAL FROM WALLET WHERE WALLET_ID = WAL_ID;

    IF BAL > GRAND_TOTAL THEN
        UPDATE WALLET SET BALANCE = BAL - GRAND_TOTAL WHERE WALLET_ID = WAL_ID;
        UPDATE RENT SET PAYMENT_STATUS = 'PAID' WHERE CUSTOMER_ID = CUST_ID;
        UPDATE BIKE SET BIKE_STATUS = 'AVAILABLE' WHERE BIKE_ID = B_ID;
        UPDATE BIKE SET DOCK_ID = D_ID WHERE BIKE_ID = B_ID;
    ELSE
        UPDATE BIKE SET BIKE_STATUS = 'AVAILABLE' WHERE BIKE_ID = B_ID;
        UPDATE BIKE SET DOCK_ID = D_ID WHERE BIKE_ID = B_ID;
        UPDATE RENT SET PAYMENT_STATUS = 'UNPAID' WHERE CUSTOMER_ID = CUST_ID;
        DBMS_OUTPUT.PUT_LINE('INSUFFICIENT BALANCE IN YOUR WALLET. REFILL YOUR WALLET');
    END IF;

    COMMIT;
    EXCEPTION
        WHEN D_ID_NULL THEN
            DBMS_OUTPUT.PUT_LINE('DOCK ID CANNOT BE NULL');
        WHEN EMAIL_NULL THEN
            DBMS_OUTPUT.PUT_LINE('EMAIL ID CANNOT BE NULL');
    ROLLBACK;

END;
